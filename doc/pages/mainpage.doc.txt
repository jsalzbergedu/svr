
/**

\defgroup Util Support routines
\defgroup Comm Protocol
\defgroup Misc Miscellaneous

\mainpage

\section Overview Overview

\subsection intro Introduction

The <i>Seawolf Video Router</i>, or <i>SVR</i>, is a software package providing
a daemon and library which provide real-time video streaming. SVR is targeted at
embedded systems utilizing machine vision, and autonomous robotics in
particular. SVR is developed and maintained by the North Carolina State
University Underwater Robotics Club as part of their participation in the AUVSI
RoboSub competition.

\subsection general Architecture

The core concepts in SVR are sources and streams. Sources provide frames. These
are things such as webcams and video files. Additionally, sources can be
provided by clients as explained below in the \ref ClientSources section. New
source types are easy to write and integrate with SVR.

To get frames from a source, a client will open a stream. A stream is associated
with a source and an encoding. A stream may resize a source, convert it to
grayscale, or choose to receive only a fraction of the frames from the
source. Multiple streams may be opened for a single source, and each can have
its own encoding and other properties.

Clients connect to a centeralized server called <i>svrd</i>. All requests for
opening streams or client sources go through this centeralized server. The
server manages reencoding source frames to stream frames and for applying any
other frame transformations. All non-client sources run within <i>svrd</i>.

\subsection ClientSources Client Sources

Client sources are different from other source types in that the frames for a
client source are generated by a client rather than a source instance running
within <i>svrd</i>. These source types are particularly useful for providing
debug imagery or providing simulated imagery without writing a special purpose
source type. Client sources can be closed manually by the client that opened
them and will automotically be closed if the client exits without closing them
first.

\subsection StreamExample Example Client Application

Below an outline of a simple client application which open a stream and
retreives frames from it. This example assumes that <i>svrd</i> is running on
the local machine, and there is a source named "cam0" available. See \ref
Running for information on running the server and opening sources.

\code
#include <svr.h>

int main(void) {
  SVR_Stream* stream;
  IplImage* frame;

  /* This call must execute successfully before any streams can be opened. It is
  responsible for opening a connection to the server and initializing the
  library */
  SVR_init();

  /* This call opens a stream associated with the given source */
  stream = SVR_Stream("cam0");

  /* Here we set the encoding of the stream to "raw" */
  SVR_Stream_setEncoding(stream, "raw");

  /* Streams start in a pause state, and things like encoding and size can only
  be changed when a stream is paused */
  SVR_Stream_unpause(stream);

  while(true) {
    /* Retreive a frame. The second arguments will make the call block until a
    frame becomes available */
    frame = SVR_Stream_getFrame(stream, true);

    if(frame) {
      /* Process the frame... */

      /* Once we're done with the frame we return it (do not free it directly) */
      SVR_Stream_returnFrame(stream, frame);

    } else if(SVR_Stream_isOrphaned(stream)) {
      /* This indicates that the source (cam0) has been closed */
      fprintf(stderr, "Stream orphaned\n");
      break;
    }
  }

  return 0;
}
\endcode

This example program excludes most of the possible error check code, though most
SVR functions will return a error code indicating whether the operation was
successful.

\section Encodings Encodings

Every stream and client source is associated with an encoding. The encoding is
used to encode data before it goes over the network socket, and to decode it at
either end-point. SVR supports multiple encodings, and more can be written and
easily integrated with SVR. For a encoding to be used, it must be supported by
both the server and client library. Encodings are specified using \ref OptString
"option strings". The available encodings, and their supported options are
documented below.

\subsection raw raw

The "raw" encoding is simple pass-through encoder. It is therefore lossless and
bandwidth intensive. For clients connecting locally, it is an excellent choice
because of the low processing latency.

\subsection jpeg jpeg

The "jpeg" encoding performs JPEG compression on each frame individually. The
JPEG encoding supports an optional \b quality argument which varies the quality
(and therefore size) of each compressed frame. This parameter must be between 5
and 100 inclusive.

JPEG encoding is useful for debug streams, and stream opened by remote
clients. The encoding time limits the frame rate, but the bandwidth saved make
is a practical option for monitoring sources remotely over slow connections.

\section OptString Option String

Option strings are used when opening server-side sources and when setting
encodings for streams and sources. An option string encompasses an object type
(e.g. encoding name, or source type) along with a set of options. For example,

\code
SVR_Stream_setEncoding(stream, "jpeg:quality=60");
\endcode

will set \c stream to use a the JPEG encoding with the "quality" parameter set
to 60. Similarly,

\code
SVR_openServerSource("cam0", "cam:index=1");
\endcode

will open a new \c cam source called "cam0" using the camera with index 1. The
options accepted by a particular encoding or source type will vary, so consult
the appropriate documentation to determine which options are available.

If no options are given then the colon can be dropped from the option string,
e.g.

\code
SVR_Stream_setEncoding(stream, "raw");
\endcode

\section MultStreams Multiple Streams

With a single stream, it is simple to set the wait flag of \ref
SVR_Stream_getFrame to true in order to wait for a new frame to be available for
processing. When working with multiple streams this method is not possible
without separate threads for each streams. The \ref SVR_Stream_sync function is
provided to solve this problem. The \ref SVR_Stream_sync function will block
until at least one stream has a new frame available. Each stream can then be
checked by calling \ref SVR_Stream_getFrame with the wait flag set to false.

\section Sources Sources

Sources can be provided by the server or by clients. These are refered to as
server sources and client sources respectively.

\subsection ServSources Server Sources

Server sources run directly within the server itself. While server sources are
harder to write than client sources, they have the benefit of being faster since
the step of encoding and transmitting frames from a client to the server is
removed. Server sources are provided to retreiving frames from cameras and
video files.

Server sources can be opened by clients at run time by calling \ref
SVR_openServerSource and providing a source name and source descriptor
specifying the source type and any options, formatted as an \ref OptString
"option string".

Any existing server source can be closed by calling \ref
SVR_closeServerSource with the name of the source. Any client, can close
a server source, even if they did not open it.

\subsection ClientSources Client Sources

Client sources are created by calling \ref SVR_Source_new with the name of the
source. Before the first frame is sent, the encoding of the source can be set
with a call to \ref SVR_Source_setEncoding. Frames are provided to the source
with calls to \ref SVR_Source_sendFrame.

Client sources can only be closed by the client that opens them, but all sources
provided by a client will be closed automatically when that client disconnects.

\section Running Running the Server and Utilties

\subsection svrd svrd

\c svrd is the SVR server process. It must be running for client programs to be
able to operate. Running <tt>svrd --help</tt> will print out a short usage
message which explains the options accepted by the server. Often, simply running
\c svrd by itself is sufficient. \c svrd may be started with an initial list of
server sources by using the \c -s flag. This file should be formatted such as,

\code
# Comments begin with a '#' and extend to the of line.
# White space and empty lines are ignored.
##

# Each line defines a source with a source name to the left of the '=' and an
# option string describing the source to the right
cam0 = cam:index=1
testsource = test

\endcode

\subsection svrctl svrctl

\c svrctl can be used to open, close, and list sources. Run <tt>svrctl
--help</tt> for usage information. Note, when opening sources the format is
"source_name,source_description", e.g.

<pre>
  # svrctl --open cam0,cam:index=1
</pre>

Be careful to leave no spaces as the entire thing must be a single argument to
the program.

\subsection svrwatch svrwatch

\c svrwatch can be used to watch one or more sources. Raw and JPEG encoding
can be used. Run <tt>svrwatch --help</tt> for usage information.

\section Debugging Debugging

Setting the environment variable \c SVR_DEBUG will cause clients to provide
additional debugging information.

*/
